#include <stdio.h>
#include <stdlib.h>

// Custom dynamic array structure
typedef struct {
    int* data;   // Pointer to the array data
    size_t size;  // Current number of elements in the array
    size_t capacity;  // Capacity of the array (total allocated space)
} DynamicArray;

// Function pointer type for a comparison function
typedef int (*ComparisonFunction)(const void*, const void*);

// Function prototypes for dynamic array operations
DynamicArray* createArray(size_t initialCapacity);
void pushBack(DynamicArray* array, int element);
int getElement(const DynamicArray* array, size_t index);
void printArray(const DynamicArray* array);
void sortArray(DynamicArray* array, ComparisonFunction compare);

// Comparison function for qsort
int compareInt(const void* a, const void* b);

int main() {
    // Create a dynamic array with an initial capacity
    DynamicArray* array = createArray(5);

    // Add elements to the array
    pushBack(array, 42);
    pushBack(array, 19);
    pushBack(array, 73);
    pushBack(array, 8);
    pushBack(array, 56);

    // Print the unsorted array
    printf("Unsorted Array: ");
    printArray(array);

    // Sort the array in ascending order
    sortArray(array, compareInt);

    // Print the sorted array
    printf("Sorted Array: ");
    printArray(array);

    // Get and print an element at a specific index
    size_t index = 2;
    printf("Element at index %zu: %d\n", index, getElement(array, index));

    // Clean up and free memory
    free(array->data);
    free(array);

    return 0;
}

// Function to create a dynamic array with a given initial capacity
DynamicArray* createArray(size_t initialCapacity) {
    DynamicArray* array = (DynamicArray*)malloc(sizeof(DynamicArray));
    if (array == NULL) {
        perror("Memory allocation failed");
        exit(1);
    }

    array->data = (int*)malloc(initialCapacity * sizeof(int));
    if (array->data == NULL) {
        perror("Memory allocation failed");
        free(array);
        exit(1);
    }

    array->size = 0;
    array->capacity = initialCapacity;

    return array;
}

// Function to add an element to the end of the dynamic array
void pushBack(DynamicArray* array, int element) {
    if (array->size == array->capacity) {
        // If the array is full, double its capacity
        array->capacity *= 2;
        array->data = (int*)realloc(array->data, array->capacity * sizeof(int));
        if (array->data == NULL) {
            perror("Memory allocation failed");
            exit(1);
        }
    }

    array->data[array->size++] = element;
}

// Function to get an element at a specific index in the dynamic array
int getElement(const DynamicArray* array, size_t index) {
    if (index < array->size) {
        return array->data[index];
    } else {
        printf("Index out of bounds.\n");
        exit(1);
    }
}

// Function to print the elements of the dynamic array
void printArray(const DynamicArray* array) {
    for (size_t i = 0; i < array->size; ++i) {
        printf("%d ", array->data[i]);
    }
    printf
